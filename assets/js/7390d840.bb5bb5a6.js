"use strict";(self.webpackChunkjanstarke_blog=self.webpackChunkjanstarke_blog||[]).push([[7030],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(c,".").concat(m)]||u[m]||y[m]||o;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2821:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={layout:"post",title:"Pairing based cryptography in Rust",date:new Date("2021-02-13T00:00:00.000Z"),categories:"rust crypto",author:"jasa"},s=void 0,i={permalink:"/blog/2021/02/13/Pairing_based_cryptography_in_Rust",source:"@site/blog/2021-02-13-Pairing_based_cryptography_in_Rust.md",title:"Pairing based cryptography in Rust",description:"Because I was was fed up with catching memory issues in the legacy PBC code, I decided to reimplement the PBC library using Rust. You can watch my progress at https://github.com/teeshop/pbc4rust.",date:"2021-02-13T00:00:00.000Z",formattedDate:"February 13, 2021",tags:[],readingTime:.775,hasTruncateMarker:!1,authors:[{name:"jasa"}],frontMatter:{layout:"post",title:"Pairing based cryptography in Rust",date:"2021-02-13T00:00:00.000Z",categories:"rust crypto",author:"jasa"},prevItem:{title:"DoSing TLS endpoints",permalink:"/blog/2021/03/25/DoSing-TLS-endpoints"},nextItem:{title:"Using Pairing-based cryptography in Java",permalink:"/blog/2021/02/05/Using_pairing_based_cryptography_in_Java"}},c={authorsImageUrls:[void 0]},p=[],l={toc:p},u="wrapper";function y(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Because I was was fed up with catching memory issues in the legacy PBC code, I decided to reimplement the PBC library using Rust. You can watch my progress at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/teeshop/pbc4rust"},"https://github.com/teeshop/pbc4rust"),"."),(0,a.kt)("p",null,"By the way, I like the concept of traits. This enables me to rely on the rules of universal algebra. So, my first unit tests look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[test]\nfn test_z_add_zero() {\n    let a: Z = Z::from(12345 as i32);\n    assert_eq!(&a + &Z::zero(), a);\n    assert_eq!(&Z::zero() + &a, a);\n}\n\n#[test]\nfn test_z_add_commutativity() {\n    let a: Z = Z::from(12345 as i32);\n    let c: Z = Z::from(6789 as i32);\n    assert_eq!(&a + &c, &c + &a);\n}\n\n#[test]\nfn test_z_add_associativity() {\n    let a: Z = Z::from(1234 as i32);\n    let b: Z = Z::from(3456 as i32);\n    let c: Z = Z::from(91 as i32);\n    let d: Z = Z::from(1234 + 3456 + 91 as i32);\n    assert_eq!(&a + &(&b + &c), d);\n    assert_eq!(&(&a + &b) + &c, d);\n}\n")))}y.isMDXComponent=!0}}]);