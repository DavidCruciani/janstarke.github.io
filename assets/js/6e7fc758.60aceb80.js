"use strict";(self.webpackChunkjanstarke_blog=self.webpackChunkjanstarke_blog||[]).push([[3533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||l;return n?a.createElement(g,r(r({ref:t},m),{},{components:n})):a.createElement(g,r({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const l={layout:"post",title:"Analyzing Linux memory images with volatility",date:new Date("2022-04-04T00:00:00.000Z"),categories:"forensics tools",author:"jasa"},r="Installation of volatility3",o={permalink:"/blog/2022/04/04/centos7-volatility",source:"@site/blog/2022-04-04-centos7-volatility.md",title:"Analyzing Linux memory images with volatility",description:"Why volatility3? Because version 2 is deprecated.",date:"2022-04-04T00:00:00.000Z",formattedDate:"April 4, 2022",tags:[],readingTime:1.92,hasTruncateMarker:!1,authors:[{name:"jasa"}],frontMatter:{layout:"post",title:"Analyzing Linux memory images with volatility",date:"2022-04-04T00:00:00.000Z",categories:"forensics tools",author:"jasa"},nextItem:{title:"Using regripper on MacOS",permalink:"/blog/2021/11/02/Using-regripper-on-darwin"}},p={authorsImageUrls:[void 0]},s=[{value:"Installing <code>dwarf2json</code>",id:"installing-dwarf2json",level:2},{value:"Obtaining the kernel with debug information`",id:"obtaining-the-kernel-with-debug-information",level:2},{value:"Obtaining System.map",id:"obtaining-systemmap",level:2},{value:"Generating the profile",id:"generating-the-profile",level:2}],m={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Why volatility3? Because version 2 is deprecated."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"\n# download the current git repo\ngit clone https://github.com/volatilityfoundation/volatility3.git\n\n# create local python venv\npython3 -m venv venv\nsource venv/bin/activate\n\n# install volatility\npushd volatility3\npip3 install -r requirements.txt\npython3 setup.py build\npython3 setup.py install\npopd\n")),(0,i.kt)("p",null,"At this point in history, you have volatility3 installed in ",(0,i.kt)("inlineCode",{parentName:"p"},"venv"),"."),(0,i.kt)("h1",{id:"obtaining-a-matching-profile"},"Obtaining a matching profile"),(0,i.kt)("p",null,"Volatility needs to know a lot about the memory layout you're going to work with. Because every linux kernel can have a different layout, you need to get the special layout for your kernel. volatility calls this the ",(0,i.kt)("em",{parentName:"p"},"profile"),"."),(0,i.kt)("p",null,"To generate the profile, you need the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the tool ",(0,i.kt)("inlineCode",{parentName:"li"},"dwarf2json"),", which is a separate github project"),(0,i.kt)("li",{parentName:"ul"},"the kernel with debug information (",(0,i.kt)("em",{parentName:"li"},"not")," the debug kernel)"),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"System.map")," file")),(0,i.kt)("h2",{id:"installing-dwarf2json"},"Installing ",(0,i.kt)("inlineCode",{parentName:"h2"},"dwarf2json")),(0,i.kt)("p",null,"Assuming you already have the go language installed, you can do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/volatilityfoundation/dwarf2json.git\npushd dwarf2json\ngo build\npopd\n")),(0,i.kt)("p",null,"This compiles a binary file named ",(0,i.kt)("inlineCode",{parentName:"p"},"dwarf2json")," in the current directory. Copy it to whereever you want."),(0,i.kt)("h2",{id:"obtaining-the-kernel-with-debug-information"},"Obtaining the kernel with debug information`"),(0,i.kt)("p",null,"First, you need to know the exact kernel version. I managed to get it by ",(0,i.kt)("inlineCode",{parentName:"p"},"grep"),"ping for ",(0,i.kt)("inlineCode",{parentName:"p"},"Linux version")," in the memory image and obtained ",(0,i.kt)("inlineCode",{parentName:"p"},"3.10.0-862.3.2.el7.x86_64"),". For the distribution and this version, there existed a package named ",(0,i.kt)("inlineCode",{parentName:"p"},"kernel-debuginfo-3.10.0-862.3.2.el7.x86_64.rpm"),", which I downloaded from the official repository. Now, you can extract the required file. I used ",(0,i.kt)("inlineCode",{parentName:"p"},"rpm2cpio")," for this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir tmp_kernel\npushd tmp_kernel\nrpm2cpio ../kernel-debuginfo-3.10.0-862.3.2.el7.x86_64.rpm |cpio -i --make-directories\npopd\n")),(0,i.kt)("p",null,"The resulting file in my case was ",(0,i.kt)("inlineCode",{parentName:"p"},"usr/lib/debug/lib/modules/3.10.0-862.3.2.el7.x86_64/vmlinux"),". Let's keep this in mind..."),(0,i.kt)("h2",{id:"obtaining-systemmap"},"Obtaining System.map"),(0,i.kt)("p",null,"This file is part of the normal kernel package: ",(0,i.kt)("inlineCode",{parentName:"p"},"kernel-3.10.0-862.3.2.el7.x86_64.rpm")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir tmp_system_map\npushd tmp_system_map\nrpm2cpio ../kernel-3.10.0-862.3.2.el7.x86_64.rpm |cpio -i --make-directories\npopd\n")),(0,i.kt)("p",null,"I found the ",(0,i.kt)("inlineCode",{parentName:"p"},"System.map")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"boot/System.map-3.10.0-862.3.2.el7.x86_64")),(0,i.kt)("h2",{id:"generating-the-profile"},"Generating the profile"),(0,i.kt)("p",null,"Now, we have all we need. Let's go"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"dwarf2json/dwarf2json linux \\\n        --elf tmp_kernel/usr/lib/debug/lib/modules/3.10.0-862.3.2.el7.x86_64/vmlinux \\\n        --system-map tmp_system_map/boot/System.map-3.10.0-862.3.2.el7.x86_64 \\\n        >centos7-3.10.0-862.3.2.el7.x86_64.json\n\n# cleaning up\nrm -rf tmp_*\n")),(0,i.kt)("h1",{id:"installing-the-profile"},"Installing the profile"),(0,i.kt)("p",null,"volatility expects the profile as ",(0,i.kt)("em",{parentName:"p"},"xz")," file, so let's compress it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"xz centos7-3.10.0-862.3.2.el7.x86_64.json\n")),(0,i.kt)("p",null,"Assume, you have ",(0,i.kt)("em",{parentName:"p"},"Python v3.9")," and ",(0,i.kt)("em",{parentName:"p"},"volatility3 v2.0.3"),", then you symbols directory is ",(0,i.kt)("inlineCode",{parentName:"p"},"venv/lib/python3.9/site-packages/volatility3-2.0.3-py3.9.egg/volatility3/symbols/"),". We will refer to it as ",(0,i.kt)("inlineCode",{parentName:"p"},"$SYMBOLS_DIR"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir $SYMBOLS_DIR/linux\nmv centos7-3.10.0-862.3.2.el7.x86_64.json.xz $SYMBOLS_DIR/linux\n")),(0,i.kt)("p",null,"That's it. Now, you have a matching profile ready to be used."))}c.isMDXComponent=!0}}]);