"use strict";(self.webpackChunkjanstarke_blog=self.webpackChunkjanstarke_blog||[]).push([[3175],{2179:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var t=i(5893),l=i(1151);const s={layout:"post",title:"Analyzing Linux memory images with volatility",date:new Date("2022-04-04T00:00:00.000Z"),categories:"forensics tools",authors:["jasa"]},o="Installation of volatility3",r={permalink:"/blog/2022/04/04/centos7-volatility",source:"@site/blog/2022-04-04-centos7-volatility.mdx",title:"Analyzing Linux memory images with volatility",description:"Why volatility3? Because version 2 is deprecated.",date:"2022-04-04T00:00:00.000Z",tags:[],readingTime:1.92,hasTruncateMarker:!1,authors:[{name:"Jan Starke",title:"Senior Forensic Analyst",url:"https://github.com/janstarke",imageURL:"https://github.com/janstarke.png",key:"jasa"}],frontMatter:{layout:"post",title:"Analyzing Linux memory images with volatility",date:"2022-04-04T00:00:00.000Z",categories:"forensics tools",authors:["jasa"]},unlisted:!1,prevItem:{title:"Rust: Iterators are not faster, but you should use them",permalink:"/blog/2024/06/15/rust-using-iterators"},nextItem:{title:"Using regripper on MacOS",permalink:"/blog/2021/11/02/Using-regripper-on-darwin"}},a={authorsImageUrls:[void 0]},d=[{value:"Installing <code>dwarf2json</code>",id:"installing-dwarf2json",level:2},{value:"Obtaining the kernel with debug information`",id:"obtaining-the-kernel-with-debug-information",level:2},{value:"Obtaining System.map",id:"obtaining-systemmap",level:2},{value:"Generating the profile",id:"generating-the-profile",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Why volatility3? Because version 2 is deprecated."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"\n# download the current git repo\ngit clone https://github.com/volatilityfoundation/volatility3.git\n\n# create local python venv\npython3 -m venv venv\nsource venv/bin/activate\n\n# install volatility\npushd volatility3\npip3 install -r requirements.txt\npython3 setup.py build\npython3 setup.py install\npopd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["At this point in history, you have volatility3 installed in ",(0,t.jsx)(n.code,{children:"venv"}),"."]}),"\n",(0,t.jsx)(n.h1,{id:"obtaining-a-matching-profile",children:"Obtaining a matching profile"}),"\n",(0,t.jsxs)(n.p,{children:["Volatility needs to know a lot about the memory layout you're going to work with. Because every linux kernel can have a different layout, you need to get the special layout for your kernel. volatility calls this the ",(0,t.jsx)(n.em,{children:"profile"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"To generate the profile, you need the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["the tool ",(0,t.jsx)(n.code,{children:"dwarf2json"}),", which is a separate github project"]}),"\n",(0,t.jsxs)(n.li,{children:["the kernel with debug information (",(0,t.jsx)(n.em,{children:"not"})," the debug kernel)"]}),"\n",(0,t.jsxs)(n.li,{children:["the ",(0,t.jsx)(n.code,{children:"System.map"})," file"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"installing-dwarf2json",children:["Installing ",(0,t.jsx)(n.code,{children:"dwarf2json"})]}),"\n",(0,t.jsx)(n.p,{children:"Assuming you already have the go language installed, you can do the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/volatilityfoundation/dwarf2json.git\npushd dwarf2json\ngo build\npopd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This compiles a binary file named ",(0,t.jsx)(n.code,{children:"dwarf2json"})," in the current directory. Copy it to whereever you want."]}),"\n",(0,t.jsx)(n.h2,{id:"obtaining-the-kernel-with-debug-information",children:"Obtaining the kernel with debug information`"}),"\n",(0,t.jsxs)(n.p,{children:["First, you need to know the exact kernel version. I managed to get it by ",(0,t.jsx)(n.code,{children:"grep"}),"ping for ",(0,t.jsx)(n.code,{children:"Linux version"})," in the memory image and obtained ",(0,t.jsx)(n.code,{children:"3.10.0-862.3.2.el7.x86_64"}),". For the distribution and this version, there existed a package named ",(0,t.jsx)(n.code,{children:"kernel-debuginfo-3.10.0-862.3.2.el7.x86_64.rpm"}),", which I downloaded from the official repository. Now, you can extract the required file. I used ",(0,t.jsx)(n.code,{children:"rpm2cpio"})," for this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"mkdir tmp_kernel\npushd tmp_kernel\nrpm2cpio ../kernel-debuginfo-3.10.0-862.3.2.el7.x86_64.rpm |cpio -i --make-directories\npopd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The resulting file in my case was ",(0,t.jsx)(n.code,{children:"usr/lib/debug/lib/modules/3.10.0-862.3.2.el7.x86_64/vmlinux"}),". Let's keep this in mind..."]}),"\n",(0,t.jsx)(n.h2,{id:"obtaining-systemmap",children:"Obtaining System.map"}),"\n",(0,t.jsxs)(n.p,{children:["This file is part of the normal kernel package: ",(0,t.jsx)(n.code,{children:"kernel-3.10.0-862.3.2.el7.x86_64.rpm"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"mkdir tmp_system_map\npushd tmp_system_map\nrpm2cpio ../kernel-3.10.0-862.3.2.el7.x86_64.rpm |cpio -i --make-directories\npopd\n"})}),"\n",(0,t.jsxs)(n.p,{children:["I found the ",(0,t.jsx)(n.code,{children:"System.map"})," as ",(0,t.jsx)(n.code,{children:"boot/System.map-3.10.0-862.3.2.el7.x86_64"})]}),"\n",(0,t.jsx)(n.h2,{id:"generating-the-profile",children:"Generating the profile"}),"\n",(0,t.jsx)(n.p,{children:"Now, we have all we need. Let's go"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"dwarf2json/dwarf2json linux \\\n        --elf tmp_kernel/usr/lib/debug/lib/modules/3.10.0-862.3.2.el7.x86_64/vmlinux \\\n        --system-map tmp_system_map/boot/System.map-3.10.0-862.3.2.el7.x86_64 \\\n        >centos7-3.10.0-862.3.2.el7.x86_64.json\n\n# cleaning up\nrm -rf tmp_*\n"})}),"\n",(0,t.jsx)(n.h1,{id:"installing-the-profile",children:"Installing the profile"}),"\n",(0,t.jsxs)(n.p,{children:["volatility expects the profile as ",(0,t.jsx)(n.em,{children:"xz"})," file, so let's compress it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"xz centos7-3.10.0-862.3.2.el7.x86_64.json\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Assume, you have ",(0,t.jsx)(n.em,{children:"Python v3.9"})," and ",(0,t.jsx)(n.em,{children:"volatility3 v2.0.3"}),", then you symbols directory is ",(0,t.jsx)(n.code,{children:"venv/lib/python3.9/site-packages/volatility3-2.0.3-py3.9.egg/volatility3/symbols/"}),". We will refer to it as ",(0,t.jsx)(n.code,{children:"$SYMBOLS_DIR"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"mkdir $SYMBOLS_DIR/linux\nmv centos7-3.10.0-862.3.2.el7.x86_64.json.xz $SYMBOLS_DIR/linux\n"})}),"\n",(0,t.jsx)(n.p,{children:"That's it. Now, you have a matching profile ready to be used."})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var t=i(7294);const l={},s=t.createContext(l);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);